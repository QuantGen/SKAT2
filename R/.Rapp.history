y[[2]][[2]]
y[[2]][[3]]
y[[2]][[3]][[1]]
y[[2]][[3]][[2]]
y[[2]][[3]][[3]]
as.list(y)
unlist(as.list(y))
source("/Users/lianlian/Dropbox/work/AssociationMapping/humanGxE/SKAT2/R/GWASW.R")
Z=list(1,2,3)
Z
names(Z)
?deparse
deparse(quote(a+b))
is.atomic(x)
is.atomic(1)
is.atomic(1:10)
quote(`<-`)
quote(<-)
f(y~1,verbose = 0L)
lmod <- eval(mc, parent.frame(1L))
?lmer
library(lme4)
?logLik
GWAS.P3D = function(y, Xt, X0 = NA, Z0 = NA, fit0 = NA, multipleCorrection = T, method = "LR") {#
	#P3D0 allows previously defined P3D0, this might be useful if you are constantly testing you code for small number of markers  #
	FaST0=getFaST(y,X=X0,Z=Z0)#
	if (is.na(fit0)) {#
		fit0 = fitlmm.FaST(FaST0)#
	}#
	whichNa =FaST0$whichNa#
	Xt = as.matrix(Xt)#
	##remove non-variants#
	if (length(whichNa) > 0) #
		Xt = Xt[-whichNa, ]#
	    varXt = apply(Xt, 2, var)#
	    whichVar = which(varXt > 0)#
	if (length(whichVar) > 0) {#
		Xt = Xt[, whichVar, drop = F]#
	} else {#
		warning("No variants in Xt")#
		return(NA)#
	}#
#
	if (multipleCorrection == T) {#
		Me = Meff(Xt)#
		cat("effective number of test is ", Me, "\n")#
	} else {#
		Me = 1#
	}#
	p.value = rep(NA, ncol(Xt))#
#
	p.value = apply(Xt, 2, function(a) {#
		singleXt.FaST(FaST0, fit0=fit0, Xt = a, method = method, P3D=T)$p.value * Me#
	})#
	return(list(Me = Me, p.value = p.value, H0var = Var))#
}
GWAS.P3D = function(y, Xt, X0 = NA, Z0 = NA, fit0 = NA, multipleCorrection = T, method = "LR") {#
	#P3D0 allows previously defined P3D0, this might be useful if you are constantly testing you code for small number of markers  #
	FaST0=getFaST(y,X=X0,Z=Z0)#
	if (is.na(fit0)) {#
		fit0 = fitlmm.FaST(FaST0)#
	}#
	whichNa =FaST0$whichNa#
	Xt = as.matrix(Xt)#
	##remove non-variants#
	if (length(whichNa) > 0) #
		Xt = Xt[-whichNa, ]#
	    varXt = apply(Xt, 2, var)#
	    whichVar = which(varXt > 0)#
	if (length(whichVar) > 0) {#
		Xt = Xt[, whichVar, drop = F]#
	} else {#
		warning("No variants in Xt")#
		return(NA)#
	}#
#
	if (multipleCorrection == T) {#
		Me = Meff(Xt)#
		cat("effective number of test is ", Me, "\n")#
	} else {#
		Me = 1#
	}#
	p.value = rep(NA, ncol(Xt))#
#
	p.value = apply(Xt, 2, function(a) {#
		singleXt.FaST(FaST0, fit0=fit0, Xt = a, method = method, P3D=T)$p.value * Me#
	})#
	return(list(Me = Me, p.value = p.value, H0var = Var))#
}#
testX = function(fit0, Xt, methods = c("SSNP.P3D.LR","SSNP.P3D.t","SSNP.LR","SSNP.t")[1]) {#
	##Var is the variance for the NULL model, without fitting the test SNPs #
	#P3D=T, NULL model and alternative model share the same variance components.		#
	if (grepl("\\.FaST",class(fit0))) {#
		#for t-test when P3D is False. Otherwise, use lm or lmm for fit0.#
		if(any(grepl("\\.P3D",methods)) | any(grepl("\\.LR",methods))) stop("must supply a fitted fit0 from fitNULL if P3D is true or if LR in methods")	#
		Var0=NA#
		ln0=NA#
	}else{#
		#fit0 as lmm or lm is only needed for LR or P3D. Not used for SSNP.t#
	 if(class(fit0)=="lmm"){#
	 	Var0 = fit0$Var#
	 	ln0 = getDL(Var0, fit0$FaST, getNeg2Log = T, REML = F)$neg2logLik#
	 }#
	 if(class(fit0)=="lm") {#
	 	Var0=NA#
	 	ln0=logLik(fit0,REML=F)#
	 }#
	 class.fit0=class(fit0)#
	 LR.methods=grep("\\.LR")#
	 t.methods=grep("\\.t")#
	Xt = as.matrix(Xt)#
	ntest = ncol(Xt)#
	test = c((ncol(fit0$FaST) + 1):(ncol(fit0$FaST$X) + ntest))#
	#get Var and ln0 befrore update FaST0#
	 #this can be optimized (fit0 has its own ML likelihood) because we only need to get neg2logLik once. #
	 FaST1=fit0$FaST#
	 rm("fit0")#
	 updateFaST.X(FaST1, X = cbind(X0, Xt))#
     n.beta=ncol(FaST1$X)#
     namesout=c("LR","p.value","logML0","logML1","Var0","Var1")#
	 out=vector("list",length=length(namesout))#
	 names(out)=namesout#
	 out=lapply(out,function(a)a=vector("numeric",length=length(methods)))#
	 LR.methods=grep("\\.LR",methods,value=T)#
	 t.methods=grep("\\.t",methods,value=T)#
	 P3D.methods=grep("\\.P3D",methods,value=T)#
	 NP.methods=setdiff(methods,P3D.methods)#
	if (grepl("lm",class.fit0)) {#
		##P3D is irrelavent for lm models#
		fit1 = fitNULL.FaST(FaST1)#
			if (length(LR.methods)>0) {#
				LR = -2 * (ln0 - logLik(fit1))#
				p.LR = pchisq(LR, df = ntest, lower.tail = F)#
				out$p.value[LR.methods]=p.LR#
			}#
			if (length(t.methods)>0) {#
				p.t = summary(fit1)$coefficients[test, 4]#
				out$p.value[t.methods]=p.t#
				}#
		##end methods for NULL Z0#
		} else {#
       `update.test.lmm<-`<-function(out,FaST1,ln0,Var0,Var1,methods){#
       	 outDL = getDL(Var1, FaST1, getNeg2Log = T, REML = F, getAlphaHat=T)#
#
       	for (i in 1:length(methods)) {#
			if (grepl("\\.LR",methods[i])) {#
				trypvalue = try({#
					ln1 = -1/2 * outDL$neg2logLik#
					Q = -2 * (ln0 - ln1)#
					p.value = pchisq(Q, df = ntest, lower.tail = F)#
					out$p.value[methods[i]]=p.value#
					out$logML1[methods[i]]=ln1#
					out$logML0[methods[i]] = ln0#
					out$LR[methods[i]]= Q#
					out$Var0[methods[i]] = Var0#
					out$Var1[methods[i]] = Var1#
				})#
			} else if (grepl("\\.t", method[i])) {#
				trypvalue = try({#
					beta = outDL$hat_alpha#
					vbeta = outDL$invtXVinvX#
					tscore=sapply(test,function(j){abs(beta[j])/sqrt(vbeta[j, j])})#
					##note: the df for t-distribution is not corrected by Satterthwaite's method. Likelihood ratio test should be better.	#
					p.t= 2 * pt(tscore, df = n - n.beta, lower.tail = F)#
					out$p.value[methods[i]]=p.t#
				})#
			}	#
		}	#
       }#
#
		if(length(P3D.methods)>0) {#
     	       Var1 = Var0#
               update.test.lmm(out,FaST1=FaST1,ln0=ln0, Var0,Var1,methods=P3D.methods)#
              }#
#
     	if(length(NP.methods)>0){#
     		 fit1 = fitNULL.FaST(FaST1)#
     	     Var1=fit1$Var#
     	     update.test.lmm(out,FaST1=FaST1,ln0=ln0,Var0=Var0,Var1=Var1,methods=NP.methods)#
     	}#
     	}#
	return(out)#
}#
}
source("/Users/lianlian/Dropbox/work/AssociationMapping/humanGxE/SKAT2/R/GWS.P3D.R")
Xt=cbind(rep(1,10),rep(2,10))
model.matrix(~Xt)
as.name(Xt)
substitute(Xt)
deparse(Xt)
?as.name
as.symbol(Xt)
as.symbol("X1:X2")
quote(Xt)
substitute(X,list(X=X))
X=Xt
substitute(X,list(X=X))
substitute(X,list(X=Xt))
ast(X)
X
f=function(a){deparse(substitute(a))}
f(a)
f(b)
f(adf)
f=function(a){deparse(substitute(paste("there is no",a)))}
f("abd")
f=function(a){eval(substitute(paste("there is no",a)))}
f("abd")
f("abddd")
stop("a",rnorm(1))
source("/Users/lianlian/Dropbox/work/AssociationMapping/humanGxE/SKAT2/R/GWS.P3D.R")
oldformula
a=1
formula(a)=a~1
source("/Users/lianlian/Dropbox/work/AssociationMapping/humanGxE/SKAT2/R/getFaST.R")
data(mice)
fast1=getFaST(mice.pheno$Obesity.BMI~list(Z1=mice.X[,1:20]))
formToMatrix=function(formula,intercept=F){#
#
#window will always be divided based on the first term#
#test will always be done on the last term.#
denv=parent.env(environment())#
formula=as.formula(formula,env=denv)#
fr.form <- subbars(formula) # substitute "|" by "+" #
environment(fr.form) <- environment(formula)#
#
##get a whole model.frame before you get X, y, Z to avoid environment contamination.#
fr=model.frame(fr.form)#
#
##get fixed term#
fixedform <- formula#
nb <- nobars(RHSForm(fixedform))#
#
if(is.null(nb))X=NULL else {#
  if(!intercept){#
  	RHSForm(fixedform)=substitute(-1+nb,list(nb=nb))#
  	}else{#
  	RHSForm(fixedform)=nb;	#
  	}#
  X=model.matrix(fixedform,fr)#
}#
#
#get random term#
bars=findbars(RHSForm(formula))#
if(is.null(bars))Z=NULL else{#
Z=lapply(bars,FUN=function(x) model.matrix(as.formula(substitute(~-1+foo,list(foo=x[[3]]))),fr))#
names(Z) <- unlist(lapply(bars, function(x) deparse(x[[3]])))#
}#
#
y <- model.response(fr)#
return(list(Z=Z,X=X,y=y))#
#
}
fast1=getFaST(mice.pheno$Obesity.BMI~list(Z1=mice.X[,1:20]))
findbars<-#
function (term) #
{#
    fb <- function(term) {#
        if (is.name(term) || !is.language(term)) #
            return(NULL)#
        if (term[[1]] == as.name("(")) #
            return(fb(term[[2]]))#
        stopifnot(is.call(term))#
        if (term[[1]] == as.name("|")) #
            return(term)#
        if (length(term) == 2) #
            return(fb(term[[2]]))#
        c(fb(term[[2]]), fb(term[[3]]))#
    }#
    expandSlash <- function(bb) {#
        makeInteraction <- function(x) {#
            if (length(x) < 2) #
                return(x)#
            trm1 <- makeInteraction(x[[1]])#
            trm11 <- if (is.list(trm1)) #
                trm1[[1]]#
            else trm1#
            list(substitute(foo:bar, list(foo = x[[2]], bar = trm11)), #
                trm1)#
        }#
        slashTerms <- function(x) {#
            if (!("/" %in% all.names(x))) #
                return(x)#
            if (x[[1]] != as.name("/")) #
                stop("unparseable formula for grouping factor")#
            list(slashTerms(x[[2]]), slashTerms(x[[3]]))#
        }#
        if (!is.list(bb)) #
            expandSlash(list(bb))#
        else unlist(lapply(bb, function(x) {#
            if (length(x) > 2 && is.list(trms <- slashTerms(x[[3]]))) #
                lapply(unlist(makeInteraction(trms)), function(trm) substitute(foo | #
                  bar, list(foo = x[[2]], bar = trm)))#
            else x#
        }))#
    }#
    modterm <- expandDoubleVerts(if (is(term, "formula")) #
        term[[length(term)]]#
    else term)#
    expandSlash(fb(modterm))#
}#
 nobars<-#
function (term) #
{#
    if (!any(c("|", "||") %in% all.names(term))) #
        return(term)#
    if (is.call(term) && term[[1]] == as.name("|")) #
        return(NULL)#
    if (is.call(term) && term[[1]] == as.name("||")) #
        return(NULL)#
    if (length(term) == 2) {#
        nb <- nobars(term[[2]])#
        if (is.null(nb)) #
            return(NULL)#
        term[[2]] <- nb#
        return(term)#
    }#
    nb2 <- nobars(term[[2]])#
    nb3 <- nobars(term[[3]])#
    if (is.null(nb2)) #
        return(nb3)#
    if (is.null(nb3)) #
        return(nb2)#
    term[[2]] <- nb2#
    term[[3]] <- nb3#
    term#
}
fast1=getFaST(mice.pheno$Obesity.BMI~list(Z1=mice.X[,1:20]))
subbars <- function(term)#
{#
    if (is.name(term) || !is.language(term)) return(term)#
    if (length(term) == 2) {#
        term[[2]] <- subbars(term[[2]])#
        return(term)#
    }#
    stopifnot(length(term) >= 3)#
    if (is.call(term) && term[[1]] == as.name('|'))#
        term[[1]] <- as.name('+')#
    if (is.call(term) && term[[1]] == as.name('||'))#
        term[[1]] <- as.name('+')#
    for (j in 2:length(term)) term[[j]] <- subbars(term[[j]])#
    term#
}
fast1=getFaST(mice.pheno$Obesity.BMI~list(Z1=mice.X[,1:20]))
fast1=getFaST(mice.pheno$Obesity.BMI~(1|mice.X[,1:20]))
RHSForm <- function(formula) {#
    formula[[length(formula)]]#
}#
#
`RHSForm<-` <- function(formula,value) {#
    formula[[length(formula)]] <- value#
    formula#
}
fast1=getFaST(mice.pheno$Obesity.BMI~(1|mice.X[,1:20]))
expandDoubleVerts <- function(term)#
{#
    expandDoubleVert <- function(term) {#
	frml <- formula(paste0("~", deparse(term[[2]])))#
	## need term.labels not all.vars to capture interactions too:#
	newtrms <- paste0("0+", attr(terms(frml), "term.labels"))#
	if(attr(terms(frml), "intercept")!=0)#
	    newtrms <- c("1", newtrms)#
	as.formula(paste("~(",#
			 paste(vapply(newtrms, function(trm)#
				      paste0(trm, "|", deparse(term[[3]])), ""),#
			       collapse=")+("), ")"))[[2]]#
    }#
#
    if (!is.name(term) && is.language(term)) {#
	if (term[[1]] == as.name("(")) {#
	    term[[2]] <- expandDoubleVerts(term[[2]])#
	}#
	stopifnot(is.call(term))#
	if (term[[1]] == as.name('||'))#
	    return( expandDoubleVert(term) )#
	## else :#
	term[[2]] <- expandDoubleVerts(term[[2]])#
	if (length(term) != 2) {#
	    if(length(term) == 3)#
		term[[3]] <- expandDoubleVerts(term[[3]])#
	}#
    }#
    term#
}
fast1=getFaST(mice.pheno$Obesity.BMI~(1|mice.X[,1:20]))
fast1
str(fast1)
update.formula(y~X1,.+X2)
update.formula(y~X1,~.+X2)
update.formula(y~X1,y~.+X2)
update.formula(y~X1,~.+X2+X1)
update.formula(y~X1,~X2+X1)
update.formula(y~X1,~X2+(1|X1))
update.formula(y~X1,~X2+(1|X2))
update.formula(y~X1,~X2+(1|X2:X1))
updateFaST.NULL<-function(FaST,newformula){#
	oldformula=FaST$formula#
	newformula=update.formula(oldformula,newformula)#
	oldterms=findterms(oldformula)#
	newterms=findterms(newformula)#
	addterms=setdiff(newterms,oldterms)#
	dropterms=setdiff(oldterms,newterms)#
	if(length(dropterms)>0){#
		stop("currently do not support drop terms from the oldformula")#
	}#
	##if oldbars does not contain Z, get FaST from scratch.#
	oldbars=bars(oldformula)#
	if(is.null(oldbars)){#
		eval.parent(substitute(FaST=getFaST(newformula)))#
	}else{#
		addMatrix=formToMatrix(addterms)#
		addMatrix.Z=addMatrix$Z#
		addMatrix.X=addMatrix$X#
		rm("addMatrix")#
		##update Zw for Z#
		if(!is.null(addMatrix$Z)){#
		  eval.parent(substitute(updateFaST.Zw(FaST,c(FaST[["listZw"]],addMatrix.Z))))#
		}#
		if(!is.null(addMatrix$X)){#
         eval.parent(substitute(updateFaST.X(FaST, c(FaST[["X"]],addMatrix.X))))#
		}	#
	}#
 }
str(fast1)
updateFaST.NULL(fast1,~.+mice.X[,21:22])
findterms<- function(term) {#
	if (term[[1]] == as.name("~")) #
		term = term[[length(term)]]#
#
	fft = function(term) {#
		#give a right hand side term#
		if(length(term)>1){#
		if (term[[1]] == as.name("+")) {#
			return(c(fft(term[[2]]), fft(term[[3]])))#
		} else {#
			return(term)#
		}#
	}else{#
		return(term)#
	}#
	}#
	term = fft(term)#
	if (!is.list(term)) {#
		term = list(term)#
	}#
	return(term)#
}
updateFaST.NULL(fast1,~.+mice.X[,21:22])
updateFaST.NULL<-function(FaST,newformula){#
	oldformula=FaST$formula#
	newformula=update.formula(oldformula,newformula)#
	oldterms=findterms(oldformula)#
	newterms=findterms(newformula)#
	addterms=setdiff(newterms,oldterms)#
	dropterms=setdiff(oldterms,newterms)#
	if(length(dropterms)>0){#
		stop("currently do not support drop terms from the oldformula")#
	}#
	##if oldbars does not contain Z, get FaST from scratch.#
	oldbars=findbars(oldformula)#
	if(is.null(oldbars)){#
		eval.parent(substitute(FaST=getFaST(newformula)))#
	}else{#
		addMatrix=formToMatrix(addterms)#
		addMatrix.Z=addMatrix$Z#
		addMatrix.X=addMatrix$X#
		rm("addMatrix")#
		##update Zw for Z#
		if(!is.null(addMatrix$Z)){#
		  eval.parent(substitute(updateFaST.Zw(FaST,c(FaST[["listZw"]],addMatrix.Z))))#
		}#
		if(!is.null(addMatrix$X)){#
         eval.parent(substitute(updateFaST.X(FaST, c(FaST[["X"]],addMatrix.X))))#
		}	#
	}#
 }
updateFaST.NULL(fast1,~.+mice.X[,21:22])
findterms(~+1+(1|X))
findterms(~1+(1|X))
is.atomic(x)
is.atomic(quote(x))
is.atomic(as.name("x"))
is.atomic(1)
paste0(findterms(~1+(1|X))),collapse="+")
paste0(findterms(~1+(1|X)),collapse="+")
findterms<- function(term) {#
	if (term[[1]] == as.name("~")) #
		term = term[[length(term)]]#
#
	fft = function(term) {#
		#give a right hand side term#
		if(length(term)>1){#
		if (term[[1]] == as.name("+")) {#
			return(c(fft(term[[2]]), fft(term[[3]])))#
		} else {#
			return(term)#
		}#
	}else{#
		if(is.atomic(term))return(NULL) else return(term)#
	}#
	}
}
findterms<- function(term) {#
	if (term[[1]] == as.name("~")) #
		term = term[[length(term)]]#
#
	fft = function(term) {#
		#give a right hand side term#
		if(length(term)>1){#
		if (term[[1]] == as.name("+")) {#
			return(c(fft(term[[2]]), fft(term[[3]])))#
		} else {#
			return(term)#
		}#
	}else{#
		if(is.atomic(term))return(NULL) else return(term)#
	}#
	}#
	term = fft(term)#
	if (!is.list(term)) {#
		term = list(term)#
	}#
	return(term)#
}
findterms(~X+(1|X)+1)
findterms(~X+5(1|X)+)
findterms(~X+5(1|X))
updateFaST<-function(FaST,newformula){#
	oldformula=FaST$formula#
	newformula=update.formula(oldformula,newformula)#
	oldterms=findterms(oldformula)#
	newterms=findterms(newformula)#
	addterms=setdiff(newterms,oldterms)#
	dropterms=setdiff(oldterms,newterms)#
	if(length(dropterms)>0){#
		stop("currently do not support drop terms from the oldformula")#
	}#
	if(length(addterms)==0){#
		return()#
	}#
	##if oldbars does not contain Z, get FaST from scratch.#
	oldbars=findbars(oldformula)#
	if(is.null(oldbars)){#
		eval.parent(substitute(FaST=getFaST(newformula)))#
	}else{#
		addMatrix=formToMatrix(paste0("~",paste0(addterms,collapse="+")))#
		addMatrix.Z=addMatrix$Z#
		addMatrix.X=addMatrix$X#
		rm("addMatrix")#
		##update Zw for Z#
		if(!is.null(addMatrix$Z)){#
		  eval.parent(substitute(updateFaST.Zw(FaST,c(FaST[["listZw"]],addMatrix.Z))))#
		}#
		if(!is.null(addMatrix$X)){#
         eval.parent(substitute(updateFaST.X(FaST, c(FaST[["X"]],addMatrix.X))))#
		}	#
	}#
 }
str(fast1)
updateFaST(fast1,.~mice.X[,21])
updateFaST(fast1,.~.+mice.X[,21])
updateFaST<-function(FaST,newformula){#
	oldformula=FaST$formula#
	newformula=update.formula(oldformula,newformula)#
	oldterms=findterms(oldformula)#
	newterms=findterms(newformula)#
	addterms=setdiff(newterms,oldterms)#
	dropterms=setdiff(oldterms,newterms)#
	if(length(dropterms)>0){#
		stop("currently do not support drop terms from the oldformula")#
	}#
	if(length(addterms)==0){#
		return()#
	}#
	##if oldbars does not contain Z, get FaST from scratch.#
	oldbars=findbars(oldformula)#
	if(is.null(oldbars)){#
		eval.parent(substitute(FaST=getFaST(newformula)))#
	}else{#
		addMatrix=formToMatrix(paste0("~",paste0(addterms,collapse="+")))#
		addMatrix.Z=addMatrix$Z#
		addMatrix.X=addMatrix$X#
		rm("addMatrix")#
		##update Zw for Z#
		if(!is.null(addMatrix.Z)){#
		  eval.parent(substitute(updateFaST.Zw(FaST,c(FaST[["listZw"]],addMatrix.Z))))#
		}#
		if(!is.null(addMatrix.X)){#
         eval.parent(substitute(updateFaST.X(FaST, c(FaST[["X"]],addMatrix.X))))#
		}	#
	}#
 }
updateFaST(fast1,.~.+mice.X[,21])
updateFaST.X = function(FaST, X) {#
	if (is.null(X)) {#
		X = matrix(rep(1, FaST$n))#
	} else {#
		X=as.matrix(X)#
		if (nrow(X) != FaST$n0) {#
			stop("X must have the same number of rows as the original y")#
		}#
		if (length(FaST$whichNa) > 0) {#
			X = as.matrix(X[-whichNa, , drop = F])#
		}#
	}#
	eval.parent(substitute({#
		FaST[["X"]] = X#
		FaST[["tU1X"]] = NULL#
		FaST[["tXX"]] = NULL#
		FaST[["tXy"]] = NULL#
		FaST[["tXW"]] = NULL#
		FaST[["tXZt"]] = NULL#
	}))#
#
	eval.parent(substitute({#
#
		if (!is.null(FaST$U1)) {#
			FaST[["tU1X"]] = crossprod(FaST$U1, X)#
#
			if (FaST$nd < FaST$n) {#
				FaST[["tXX"]] = crossprod(X)#
				FaST[["tXy"]] = crossprod(X, FaST$y)#
				if (!is.null(FaST$Zw)) FaST[["tXW"]] = crossprod(X, FaST$Zw)#
				if (!is.null(FaST$Zt)) FaST[["tXZt"]] = crossprod(X, FaST$Zt)#
			}#
		}#
	}))#
}
updateFaST(fast1,.~.+mice.X[,21])
updateFaST<-function(FaST,newformula){#
	oldformula=FaST$formula#
	newformula=update.formula(oldformula,newformula)#
	oldterms=findterms(oldformula)#
	newterms=findterms(newformula)#
	addterms=setdiff(newterms,oldterms)#
	dropterms=setdiff(oldterms,newterms)#
	if(length(dropterms)>0){#
		stop("currently do not support drop terms from the oldformula")#
	}#
	if(length(addterms)==0){#
		return()#
	}#
	##if oldbars does not contain Z, get FaST from scratch.#
	oldbars=findbars(oldformula)#
	if(is.null(oldbars)){#
		eval.parent(substitute(FaST=getFaST(newformula)))#
	}else{#
		addMatrix=formToMatrix(paste0("~",paste0(addterms,collapse="+")))#
		addMatrix.Z=addMatrix$Z#
		addMatrix.X=addMatrix$X#
		rm("addMatrix")#
		##update Zw for Z#
		if(!is.null(addMatrix.Z)){#
		  eval.parent(substitute(updateFaST.Zw(FaST,c(FaST[["listZw"]],addMatrix.Z))))#
		}#
		if(!is.null(addMatrix.X)){#
         eval.parent(substitute(updateFaST.X(FaST, cbind(FaST[["X"]],addMatrix.X))))#
		}	#
	}#
 }
str(fast1)
updateFaST(fast1,.~.+mice.X[,21])
str(fast1)
fast1=getFaST(y~1)
model.matrix(y~1)
updateFaST<-function(FaST,newformula){#
	oldformula=FaST$formula#
	newformula=update.formula(oldformula,newformula)#
	oldterms=findterms(oldformula)#
	newterms=findterms(newformula)#
	addterms=setdiff(newterms,oldterms)#
	dropterms=setdiff(oldterms,newterms)#
	if(length(dropterms)>0){#
		stop("currently do not support drop terms from the oldformula")#
	}#
	if(length(addterms)==0){#
		return()#
	}#
	##if oldbars does not contain Z, get FaST from scratch.#
	oldbars=findbars(oldformula)#
	if(is.null(oldbars)){#
		eval.parent(substitute({FaST=getFaST(newformula);FaST[["formula"]]=newformula}))#
	}else{#
		addMatrix=formToMatrix(paste0("~",paste0(addterms,collapse="+")))#
		addMatrix.Z=addMatrix$Z#
		addMatrix.X=addMatrix$X#
		rm("addMatrix")#
		##update Zw for Z#
		if(!is.null(addMatrix.Z)){#
		  eval.parent(substitute({updateFaST.Zw(FaST,c(FaST[["listZw"]],addMatrix.Z));FaST[["formula"]]=newformula}))#
		}#
		if(!is.null(addMatrix.X)){#
         eval.parent(substitute({updateFaST.X(FaST, cbind(FaST[["X"]],addMatrix.X));FaST[["formula"]]=newformula}))#
		}	#
	}#
 }
X1=mice.X[,1:20]#
X2=mice.X[,21]#
y=mice.pheno$Obesity.BMI#
fast1=getFaST(y~X1)#
updateFaST(fast1,y~X1+X2)
str(fast1)
X1=mice.X[,1:20]#
X2=mice.X[,21]#
y=mice.pheno$Obesity.BMI#
fast1=getFaST(y~X1)
str(fast1)
updateFaST(fast1,y~X1+X2)
fast1
str(fast1)
updateFaST(fast1,~.+(1|X2)
)
str(fast1)
updateFaST(fast1,~.+(1|X2)+(1|X1:X2))
str(fast1)
Z=list(X1,X2)
str(Z)
do.call(class,Z)
do.call(Z,class)
?do.call
dim(Z)
class(Z)
do.call(class,Z)
sapply(class,Z)
sapply(Z,class)
match("eigenG",sapply(Z,class))
match("eigenG",sapply(Z,class),0)
Z=c(Z,getEigenG(Zg=mice.X[,25:30]))
str(Z)
Z=c(Z,list(getEigenG(Zg=mice.X[,25:30])))
str(Z)
Z=list(X1,X2,getEigenG(Zg=mice.X[,25:30]))
str(Z)
match("eigenG",sapply(Z,class),0)
##functions#
getEigenG=function(G=NULL,Zg=NULL,precision=1e-5){#
  out=list()#
  if(!is.null(G) & !is.null(Zg)) stop("Only use one of G or Zg")#
  if(is.null(G) & is.null(Zg)) stop("Provide G or Zg")#
  if(!is.null(Zg)){#
  	if(any(is.na(Zg))){#
  		Zg=meanImpute(Zg)#
  	}#
  	if(nrow(Zg)<=ncol(Zg)) {#
  		G=tcrossprod(Zg)#
  	    eigenG=eigen(G,symmetric=T)#
    	U1=eigenG$vectors#
    	d1=eigenG$values	#
  	}else{#
  	svdZg=svd(Zg,nv=0)#
    U1=svdZg$u#
    d1=svdZg$d^2 ###Do not forget d^2!!!#
  	}#
  }else{#
    eigenG=eigen(G,symmetric=T)#
    U1=eigenG$vectors#
    d1=eigenG$values	#
  }#
  wh0=which(d1<precision)#
  if(length(wh0>0)){#
  	d1=d1[-wh0] #
  	U1=U1[,-wh0]#
 	}#
  out$d1=d1#
  out$U1=U1#
  class(out)=c("eigenG")#
  return(out)#
}
Z=list(X1,X2,getEigenG(Zg=mice.X[,25:30]))
match("eigenG",sapply(Z,class),0)
str(Z)
if(match("eigenG",sapply(Z,class),0))"yes"
if(match("eigenGG",sapply(Z,class),0))"yes"
!3
!0
if(match("matrix",sapply(Z,class),0))"yes"
match("matrix",sapply(Z,class),0))
match("matrix",sapply(Z,class),0)
str(Z)
ncol(Z[[2]])
ncolZ=sapply(Z,ncol)
ncolZ
which.max(ncolZ)
Z=list(X1[,1],X1[,2],getEigenG(X1))
Z=list(X1[,1],X1[,2],getEigenG(Zg=X1))
str(Z)
classZ=sapply(Z,class)
classZ
matchNumeric=match("numeric",classZ,0)
matchNumeric
whichNumeric=which("numeric" %in%classZ)
whichNumeric
?match
whichNumeric=which(classZ=="numeric")
whichNumeric
whichNumeric=which(classZ=="numeric")#
		if(length(whichNumeric)>0){#
			for(i in whichNumeric){#
				Z[[i]]=as.matrix(Z[[i]])#
			}#
		}
dim(Z)
str(Z)
Z=list(X1[,1],1:10,getEigenG(Zg=X1))
whichNumeric=which(classZ=="numeric")#
		if(length(whichNumeric)>0){#
			for(i in whichNumeric){#
				Z[[i]]=as.matrix(Z[[i]])#
			}#
		}
str(Z)
ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(a),0,ncola)})
str(Z)
ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),0,ncola)})
ncolZ
str(Z)
ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),1,ncola)})
ncol(Z)
ncolZ
which.max(ncol(Z))
eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]],getEigenG(Zg=Z[[1]])))
whichMaxcol=which.max(ncolZ)
eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]],getEigenG(Zg=Z[[1]])))
eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))
getFaST = function(null.formula, Zt = NULL) {#
	NULLmat=formToMatrix(null.formula)#
	y=NULLmat$y#
	X=NULLmat$X#
	Z=NULLmat$Z#
	rm("NULLmat")#
	out = list()#
	out$n0 = length(y)#
	whichNa = which(is.na(y))#
	if (length(whichNa) > 0) {#
		y = y[-whichNa]#
	}#
	out$y = y#
	out$whichNa = whichNa#
	out$n = length(y)#
	listZw = NULL#
	if (!is.null(Z)) {#
		classZ=sapply(Z,class)#
		#whichNumeric=which(classZ=="numeric")#
		#if(length(whichNumeric)>0){#
		#	for(i in whichNumeric){#
		#		Z[[i]]=as.matrix(Z[[i]])#
		#	}#
		#}#
		whichEigenG=mwhich(classZ=="eigenG")#
		if(length(whichEigenG)>1){#
			stop("only one eigenG object is allowed in Z")#
		}#
		if (length(whichEigenG)==1) {#
			cat("It is better to supply the one element of Z as an eigenG object to save computation\n")#
			ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),1,ncola)})#
			whichMaxcol=which.max(ncolZ)#
			eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))#
		} else {#
			eigenG = Z[[whichEigenG]]#
		}#
		if (length(whichNa) > 0) {#
			eigenG$U1 = eigenG$U1[-whichNa, ]#
		}#
		if (length(Z) > 1) {#
			listZw = Z[-whichEigenG]#
		}#
		out$U1 = eigenG$U1#
		out$d1 = eigenG$d1#
		out$nd = length(out$d1)#
		out$tU1y = crossprod(out$U1, out$y)#
		if (out$nd < out$n) {#
			out$tyy = sum(out$y^2)#
		}#
	}	#
	#must be outside of if!(is.null(Z)), otherwise, X and Zt will not be updated i nto FaST#
	updateFaST.X(out, X)#
	updateFaST.Zw(out, listZw)#
	updateFaST.Zt(out, Zt)#
	out$formula=null.formula#
	class(out) = c("FaST")#
	return(out)#
}
fast1=getFaST(y~X1)
str(fast1)
fast1=getFaST(y~X1+(1|X2))
getFaST = function(null.formula, Zt = NULL) {#
	NULLmat=formToMatrix(null.formula)#
	y=NULLmat$y#
	X=NULLmat$X#
	Z=NULLmat$Z#
	rm("NULLmat")#
	out = list()#
	out$n0 = length(y)#
	whichNa = which(is.na(y))#
	if (length(whichNa) > 0) {#
		y = y[-whichNa]#
	}#
	out$y = y#
	out$whichNa = whichNa#
	out$n = length(y)#
	listZw = NULL#
	if (!is.null(Z)) {#
		classZ=sapply(Z,class)#
		#whichNumeric=which(classZ=="numeric")#
		#if(length(whichNumeric)>0){#
		#	for(i in whichNumeric){#
		#		Z[[i]]=as.matrix(Z[[i]])#
		#	}#
		#}#
		whichEigenG=which(classZ=="eigenG")#
		if(length(whichEigenG)>1){#
			stop("only one eigenG object is allowed in Z")#
		}#
		if (length(whichEigenG)==1) {#
			cat("It is better to supply the one element of Z as an eigenG object to save computation\n")#
			ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),1,ncola)})#
			whichMaxcol=which.max(ncolZ)#
			eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))#
		} else {#
			eigenG = Z[[whichEigenG]]#
		}#
		if (length(whichNa) > 0) {#
			eigenG$U1 = eigenG$U1[-whichNa, ]#
		}#
		if (length(Z) > 1) {#
			listZw = Z[-whichEigenG]#
		}#
		out$U1 = eigenG$U1#
		out$d1 = eigenG$d1#
		out$nd = length(out$d1)#
		out$tU1y = crossprod(out$U1, out$y)#
		if (out$nd < out$n) {#
			out$tyy = sum(out$y^2)#
		}#
	}	#
	#must be outside of if!(is.null(Z)), otherwise, X and Zt will not be updated i nto FaST#
	updateFaST.X(out, X)#
	updateFaST.Zw(out, listZw)#
	updateFaST.Zt(out, Zt)#
	out$formula=null.formula#
	class(out) = c("FaST")#
	return(out)#
}
fast1=getFaST(y~X1+(1|X2))
getFaST = function(null.formula, Zt = NULL) {#
	NULLmat=formToMatrix(null.formula)#
	y=NULLmat$y#
	X=NULLmat$X#
	Z=NULLmat$Z#
	rm("NULLmat")#
	out = list()#
	out$n0 = length(y)#
	whichNa = which(is.na(y))#
	if (length(whichNa) > 0) {#
		y = y[-whichNa]#
	}#
	out$y = y#
	out$whichNa = whichNa#
	out$n = length(y)#
	listZw = NULL#
	if (!is.null(Z)) {#
		classZ=sapply(Z,class)#
		#whichNumeric=which(classZ=="numeric")#
		#if(length(whichNumeric)>0){#
		#	for(i in whichNumeric){#
		#		Z[[i]]=as.matrix(Z[[i]])#
		#	}#
		#}#
		whichEigenG=which(classZ=="eigenG")#
		if(length(whichEigenG)>1){#
			stop("only one eigenG object is allowed in Z")#
		}#
		if (length(whichEigenG)==0) {#
			cat("It is better to supply the one element of Z as an eigenG object to save computation\n")#
			ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),1,ncola)})#
			whichMaxcol=which.max(ncolZ)#
			eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))#
		} else {#
			eigenG = Z[[whichEigenG]]#
		}#
		if (length(whichNa) > 0) {#
			eigenG$U1 = eigenG$U1[-whichNa, ]#
		}#
		if (length(Z) > 1) {#
			listZw = Z[-whichEigenG]#
		}#
		out$U1 = eigenG$U1#
		out$d1 = eigenG$d1#
		out$nd = length(out$d1)#
		out$tU1y = crossprod(out$U1, out$y)#
		if (out$nd < out$n) {#
			out$tyy = sum(out$y^2)#
		}#
	}	#
	#must be outside of if!(is.null(Z)), otherwise, X and Zt will not be updated i nto FaST#
	updateFaST.X(out, X)#
	updateFaST.Zw(out, listZw)#
	updateFaST.Zt(out, Zt)#
	out$formula=null.formula#
	class(out) = c("FaST")#
	return(out)#
}
fast1=getFaST(y~X1+(1|X2))
dim(X1)
length(y)
dim(X2)
class(X2)
X2
fast1=getFaST(y~X1+(1|X2))
fast1=getFaST(y~X1+(1|X1[,1:2]))
fast1=getFaST(y~X1+X2)
str(fast1)
updateFaST(fast1,y~.+(1|X2))
eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))
str(Z)
Z=list(X2)
str(Z)
ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),1,ncola)})
ncolZ
whichMaxcol=which.max(ncolZ)
whichMaxcol
eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))
getEigenG=function(G=NULL,Zg=NULL,precision=1e-5){#
  out=list()#
  if(!is.null(G) & !is.null(Zg)) stop("Only use one of G or Zg")#
  if(is.null(G) & is.null(Zg)) stop("Provide G or Zg")#
  if(!is.null(Zg)){#
  	Zg=as.matrix(Zg)#
  	if(any(is.na(Zg))){#
  		Zg=meanImpute(Zg)#
  	}#
  	if(nrow(Zg)<=ncol(Zg)) {#
  		G=tcrossprod(Zg)#
  	    eigenG=eigen(G,symmetric=T)#
    	U1=eigenG$vectors#
    	d1=eigenG$values	#
  	}else{#
  	svdZg=svd(Zg,nv=0)#
    U1=svdZg$u#
    d1=svdZg$d^2 ###Do not forget d^2!!!#
  	}#
  }else{#
    eigenG=eigen(G,symmetric=T)#
    U1=eigenG$vectors#
    d1=eigenG$values	#
  }#
  wh0=which(d1<precision)#
  if(length(wh0>0)){#
  	d1=d1[-wh0] #
  	U1=U1[,-wh0]#
 	}#
  out$d1=d1#
  out$U1=U1#
  class(out)=c("eigenG")#
  return(out)#
}
eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))
eigenG
[[whichMaxcol]]
Z[[whichMaxcol]]
Z[[1l]]
Z[[1]]
svd(Z[[1]])
eigenG = ifelse(whichMaxcol,getEigenG(Zg=Z[[whichMaxcol]]),getEigenG(Zg=Z[[1]]))
whichMaxcol
getEigenG(Zg=Z[[whichMaxcol]])
getFaST = function(null.formula, Zt = NULL) {#
	NULLmat=formToMatrix(null.formula)#
	y=NULLmat$y#
	X=NULLmat$X#
	Z=NULLmat$Z#
	rm("NULLmat")#
	out = list()#
	out$n0 = length(y)#
	whichNa = which(is.na(y))#
	if (length(whichNa) > 0) {#
		y = y[-whichNa]#
	}#
	out$y = y#
	out$whichNa = whichNa#
	out$n = length(y)#
	listZw = NULL#
	if (!is.null(Z)) {#
		classZ=sapply(Z,class)#
		#whichNumeric=which(classZ=="numeric")#
		#if(length(whichNumeric)>0){#
		#	for(i in whichNumeric){#
		#		Z[[i]]=as.matrix(Z[[i]])#
		#	}#
		#}#
		whichEigenG=which(classZ=="eigenG")#
		if(length(whichEigenG)>1){#
			stop("only one eigenG object is allowed in Z")#
		}#
		if (length(whichEigenG)==0) {#
			cat("It is better to supply the one element of Z as an eigenG object to save computation\n")#
			ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),1,ncola)})#
			whichMaxcol=which.max(ncolZ)#
			if(whichMaxcol) eigenG=getEigenG(Zg=Z[[whichMaxcol]])else eigenG=getEigenG(Zg=Z[[1]])#
		} else {#
			eigenG = Z[[whichEigenG]]#
		}#
		if (length(whichNa) > 0) {#
			eigenG$U1 = eigenG$U1[-whichNa, ]#
		}#
		if (length(Z) > 1) {#
			listZw = Z[-whichEigenG]#
		}#
		out$U1 = eigenG$U1#
		out$d1 = eigenG$d1#
		out$nd = length(out$d1)#
		out$tU1y = crossprod(out$U1, out$y)#
		if (out$nd < out$n) {#
			out$tyy = sum(out$y^2)#
		}#
	}	#
	#must be outside of if!(is.null(Z)), otherwise, X and Zt will not be updated i nto FaST#
	updateFaST.X(out, X)#
	updateFaST.Zw(out, listZw)#
	updateFaST.Zt(out, Zt)#
	out$formula=null.formula#
	class(out) = c("FaST")#
	return(out)#
}
getEigenG(Zg=Z[[whichMaxcol]])
fast1=getFaST(y~(1|X1))
str(fast1)
fast1=getFaST(y~(1|X1)+(1|X1:X2))
null.formula=y~(1|X1)+(1|X1:X2)
NULLmat=formToMatrix(null.formula)
str(NULLmat)
getFaST = function(null.formula, Zt = NULL) {#
	NULLmat=formToMatrix(null.formula)#
	y=NULLmat$y#
	X=NULLmat$X#
	Z=NULLmat$Z#
	rm("NULLmat")#
	out = list()#
	out$n0 = length(y)#
	whichNa = which(is.na(y))#
	if (length(whichNa) > 0) {#
		y = y[-whichNa]#
	}#
	out$y = y#
	out$whichNa = whichNa#
	out$n = length(y)#
	listZw = NULL#
	if (!is.null(Z)) {#
		classZ=sapply(Z,class)#
		#whichNumeric=which(classZ=="numeric")#
		#if(length(whichNumeric)>0){#
		#	for(i in whichNumeric){#
		#		Z[[i]]=as.matrix(Z[[i]])#
		#	}#
		#}#
		whichEigenG=which(classZ=="eigenG")#
		if(length(whichEigenG)>1){#
			stop("only one eigenG object is allowed in Z")#
		}#
		if (length(whichEigenG)==0) {#
			cat("It is better to supply the one element of Z as an eigenG object to save computation\n")#
			ncolZ=sapply(Z,function(a){ncola=ncol(a);ifelse(is.null(ncola),1,ncola)})#
			whichMaxcol=which.max(ncolZ)#
			whichEigenG=ifelse(whichMaxcol,whichMaxcol,1)   #
			eigenG=getEigenG(Zg=Z[[whichEigenG]])#
		} else {#
			eigenG = Z[[whichEigenG]]#
		}#
		if (length(whichNa) > 0) {#
			eigenG$U1 = eigenG$U1[-whichNa, ]#
		}#
		if (length(Z) > 1) {#
			listZw = Z[-whichEigenG]#
		}#
		out$U1 = eigenG$U1#
		out$d1 = eigenG$d1#
		out$nd = length(out$d1)#
		out$tU1y = crossprod(out$U1, out$y)#
		if (out$nd < out$n) {#
			out$tyy = sum(out$y^2)#
		}#
	}	#
	#must be outside of if!(is.null(Z)), otherwise, X and Zt will not be updated i nto FaST#
	updateFaST.X(out, X)#
	updateFaST.Zw(out, listZw)#
	updateFaST.Zt(out, Zt)#
	out$formula=null.formula#
	class(out) = c("FaST")#
	return(out)#
}
fast1=getFaST(y~(1|X1)+(1|X1:X2))
str(fast1)
source("/Users/lianlian/Dropbox/work/AssociationMapping/humanGxE/SKAT2/R/GWASW.R")
GWAS= function(null.formula, MxE.formula=~(1|M)+(1|E)+(1|M:E), X = NULL, Z = NULL,  setsize=10, sets=NULL, methods = NULL) {#
	#if mehtods is supplied, it will supersede the formula, and test the last term as specified by methods. #
	#methods=c("Score", "SKAT","SSNP.P3D.LR","SSNP.P3D.t")[1]#
	#the test method for the last term is based on the #
     #get information for GxE terms#
     containM=as.logical(attr(terms(subbars(MxE.formula)),"factors")[1,])#
     term.labels=attr(terms(subbars(MxE.formula)),"term.labels")#
     nterms=length(term.labels)#
     parsed.terms=findterms(MxE.formula)#
     deparsed.terms=sapply(parsed.terms,deparse)#
     if(is.null(methods)){#
      if(!is.null(findbars(parsed.terms[[nterms]]))) methods="Score" else methods="SSNP.P3D.LR"#
     }#
##update methods #
	   methodsZ=intersect(methods,c("Score","SKAT"))#
       n.methodsZ=length(methodsZ)#
    	methodsX=intersect(methods,c("SSNP.P3D.LR","SSNP.P3D.t","SSNP.LR","SSNP.t"))#
    	n.methodsX=length(methodsX)#
    	 nmethods = length(methods)#
#container for output         #
         out = matrix(nrow = nSets, ncol = nmethods)#
        colnames(out)=c(methodsZ,methodsX)#
#update sets   #
if(is.null(sets))eval(substitute(sets<-rep(c(1:ceiling(ncol(M)/setsize)), each = setsize)[1:ncol(M)],list(M=parsed.terms[[1]])))#
nSets = length(unique(sets))#
#
##start fitting NULL model or get FaST         #
      if(nterms==0){#
    	    	stop("must supply test terms")#
    	    }#
     if(nterms>=1){#
     	whichM=which(containM)#
        whichNoM=which(containM)#
        formM=formNoM=NULL#
     	NULL.NoM=setdiff(whichNoM,nterms)#
     	NULL.M=setdiff(whichM,nterms)#
     	#The last term is one to be tested. if it is not in the moving window. for example M+E, E is not the moving window, therefore, the test matrix only need to be obtained once.#
     	if((!containM[nterms])){#
             	testMatrix=model.matrix(as.formula(paste0("~-1+",term.labels[nterms])))#
             	testMatrix=checkX(testMatrix,fit0$FaST$n0,fit0$FaST$whichNa)#
        }#
#
     	 ##NULL model for the part not in the moving window.   #
         if(length(NULL.NoM)>0){     #
     	    NULLformNoM=as.formula(paste0(null.formula,paste0(deparsedTerms[NULL.NoM],collapse="+")))#
     	}else{#
     		NULLformNoM=null.formula#
     	}		#
        ##if no terms in the moving window is in the NULL model, we only need to fit a single NULL model.#
        if(length(NULL.M)==0){#
       	 fit0=fitNULL(NULLformNoM,Zt=NULL)#
        }else{#
       	#every set needs its only NULL model.#
         FaST0=getFaST(NULLformNoM)#
         }#
     	for (i in 1:nSets) {#
     	       if(length(NULL.M)>0){#
     	       	##replace the label of moving window by Mi.#
     	       	 NULLformM=as.formula(paste0("~.+",paste0(gsub(term.labels[1],"Mi",deparsedTerms[NULL.M]),collapse="+")))#
     	         updateFaST(FaST0,newformula=NULLformM)#
     	         fit0==fitNULL.FaST(FaST0)#
     	       }#
            #get test matrix for every moving window if the test term contains the moving window. #
             if(containM[nterms]){#
             	testMatrix=model.matrix(as.formula(paste0("~-1+",gsub(term.labels[1],"Mi",term.labels[nterms]))))#
             	testMatrix=checkX(testMatrix,fit0$FaST$n0,fit0$FaST$whichNa)#
             	}#
    	   ##extract sets from the first term#
    	   if(n.methodsZ>0){#
    	      out[i,1:n.methodsZ]=testZ(fit0,Zt=testMatrix)#
    	   }#
    	   if(n.methodsX>0){#
    	      out[i,(n.methodsZ+1):(n.methodsZ+n.methodsX)]=testX(fit0,Xt=testMatrix)	#
    	   }        #
       }#
      return(out)#
}
pi
source("/Users/lianlian/Dropbox/work/AssociationMapping/humanGxE/SKAT2/R/bruteNeg2Loglik.R")
